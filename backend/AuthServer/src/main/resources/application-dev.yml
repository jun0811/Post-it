
server:
  port: 8443

spring:
  application:
    name: authserver

  profiles:
    active: dev

  data:
    mongodb:
      host: j4c103.p.ssafy.io
      port: 27017
      authentication-database: user
      database: user
      username: userAdmin
      password: youser@dm1n!%#

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 8468921618-7nincald8lmi8sse5901lljorqj7i79k.apps.googleusercontent.com
            clientSecret: 2YXhgpguNinN-1CbUSJIxPB-
            redirectUri: "http://j4c103.p.ssafy.io:5555/api/auth/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile

          naver:
            clientId: T5C4l4_XGy7vi8hIiDyL
            clientSecret: YGFLDz1va1
            redirectUri: "http://j4c103.p.ssafy.io:5555/api/auth/oauth2/callback/{registrationId}"
            authorization_grant_type: authorization_code
            scope:
              - name
              - email
              - profile_image
            client-name: Naver

          github:
            clientId: f94d66b82e2e9a0b300c
            clientSecret: 05db68d8b0ca77dff03f994ae98ae40c5a995ac4
            redirectUri: "http://j4c103.p.ssafy.io:5555/api/auth/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
        provider:
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
    refreshTokenExpirationMesc: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://j4c103.p.ssafy.io/oauth2/redirect
      - http://j4c103.p.ssafy.io:3000/oauth2/redirect
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect

logging:
  level:
    root: INFO

eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true # 유레카 서비스에 자신을 등록
    fetchRegistry: true # 레즈스트리의 로컬 복사본 가져오게 허용
    serviceUrl: # 유레카 클러스터 구축
      defaultZone: http://j4c103.p.ssafy.io:8761/eureka/